# --- STAGE 1: Build Environment ---
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
# This step is crucial for faster builds if dependencies don't change
COPY package.json yarn.lock* package-lock.json* ./

# Install dependencies
# Use `npm ci` for clean installs in CI/CD environments
RUN npm ci --only=production

# Copy the rest of the application source code
COPY . .

# Build the NestJS application
# Assuming your build script is `npm run build` and outputs to `dist`
RUN npm run build

# --- STAGE 2: Production Environment ---
FROM node:22-alpine AS production

# Set working directory
WORKDIR /app

# Copy only the necessary files from the builder stage
# This includes node_modules (production dependencies) and the built application
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./package.json # Needed for `npm start`

# Expose the port your NestJS application listens on (default is 3000)
EXPOSE 3000

# Define the command to run your application
# Assuming your start script is `npm run start:prod` or similar
CMD ["npm", "run", "start:prod"]